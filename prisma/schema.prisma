generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tenant entity representing an organization that can have multiple properties
model Organization {
  id                       String            @id @default(cuid())
  name                     String
  domain                   String?           @unique
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  stripeAccountId          String?
  stripeChargesEnabled     Boolean           @default(false)
  stripeOnboardingComplete Boolean           @default(false)
  channels                 Channel[]
  invitations              InvitationToken[]
  properties               Property[]
  reservations             Reservation[]
  rooms                    Room[]
  roomTypes                RoomType[]
  users                    UserOrg[]

  @@index([domain])
  @@index([stripeAccountId])
}

/// Property entity representing individual properties within an organization
model Property {
  id             String            @id @default(cuid())
  organizationId String
  name           String
  address        String?
  phone          String?
  email          String?
  timezone       String            @default("UTC")
  currency       String            @default("USD")
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  isDefault      Boolean           @default(false)
  invitations    InvitationToken[]
  organization   Organization      @relation(fields: [organizationId], references: [id])
  settings       PropertySettings?
  reservations   Reservation[]
  rooms          Room[]
  roomTypes      RoomType[]
  userProperties UserProperty[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([organizationId, isDefault])
}

/// Application user
model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  phone           String?
  favorites       Favorite[]
  sentInvitations InvitationToken[] @relation("InvitationCreator")
  rateChangeLogs  RateChangeLog[]
  reservations    Reservation[]
  memberships     UserOrg[]
  userProperties  UserProperty[]
}

/// Join table: user membership in a tenant with a role
model UserOrg {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

/// Join table: user access to specific properties with property-level roles
model UserProperty {
  id         String       @id @default(cuid())
  userId     String
  propertyId String
  role       PropertyRole
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  shift      ShiftType?
  property   Property     @relation(fields: [propertyId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

/// Invitation tokens for user management
model InvitationToken {
  id             String        @id @default(cuid())
  email          String
  organizationId String
  role           UserRole
  propertyId     String?
  propertyRole   PropertyRole?
  shift          ShiftType?
  phone          String?
  token          String        @unique
  expiresAt      DateTime
  createdBy      String
  createdAt      DateTime      @default(now())
  used           Boolean       @default(false)
  usedAt         DateTime?
  creator        User          @relation("InvitationCreator", fields: [createdBy], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])
  property       Property?     @relation(fields: [propertyId], references: [id])

  @@index([token])
  @@index([email])
  @@index([organizationId])
  @@index([propertyId])
}

/// Room type entity
model RoomType {
  id                  String          @id @default(cuid())
  organizationId      String
  name                String
  abbreviation        String?
  privateOrDorm       String          @default("private")
  physicalOrVirtual   String          @default("physical")
  maxOccupancy        Int             @default(1)
  maxAdults           Int             @default(1)
  maxChildren         Int             @default(0)
  adultsIncluded      Int             @default(1)
  childrenIncluded    Int             @default(0)
  description         String?
  amenities           String[]
  customAmenities     String[]
  featuredImageUrl    String?
  additionalImageUrls String[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  availability        Int?
  basePrice           Float?
  closedToArrival     Boolean         @default(false)
  closedToDeparture   Boolean         @default(false)
  currency            String          @default("INR")
  maxLOS              Int?
  minLOS              Int?
  weekdayPrice        Float?
  weekendPrice        Float?
  propertyId          String
  dailyRates          DailyRate[]
  rateChangeLogs      RateChangeLog[]
  rooms               Room[]
  organization        Organization    @relation(fields: [organizationId], references: [id])
  property            Property        @relation(fields: [propertyId], references: [id])
  seasonalRates       SeasonalRate[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([propertyId])
}

/// Room entity
model Room {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           String
  capacity       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  imageUrl       String?
  pricingId      String?
  sizeSqFt       Int?
  description    String?
  doorlockId     String?
  roomTypeId     String?
  propertyId     String
  favorites      Favorite[]
  reservations   Reservation[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  property       Property      @relation(fields: [propertyId], references: [id])
  roomType       RoomType?     @relation(fields: [roomTypeId], references: [id])
  galleryImages  RoomImage[]
  pricing        RoomPricing?  @relation("RoomPricingLink")
  amenities      Amenity[]     @relation("RoomAmenities")

  @@index([organizationId])
  @@index([propertyId])
}

/// Amenities available in a room
model Amenity {
  id    String @id @default(cuid())
  name  String @unique
  rooms Room[] @relation("RoomAmenities")
}

/// Gallery images for a room
model RoomImage {
  id      String  @id @default(cuid())
  roomId  String
  url     String
  caption String?
  sort    Int?
  room    Room    @relation(fields: [roomId], references: [id])
}

/// Reservation or booking entity
model Reservation {
  id                    String               @id @default(cuid())
  organizationId        String
  roomId                String
  userId                String?
  guestName             String?
  checkIn               DateTime
  checkOut              DateTime
  source                ReservationSource
  channelId             String?
  status                ReservationStatus    @default(PENDING)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  adults                Int                  @default(1)
  children              Int                  @default(0)
  notes                 String?
  email                 String?
  idNumber              String?
  idType                String?
  issuingCountry        String?
  phone                 String?
  propertyId            String
  amountCaptured        Int?
  amountHeld            Int?
  depositAmount         Int?
  depositDueDate        DateTime?
  finalPaymentDue       DateTime?
  paymentStatus         String?
  paymentTerms          String?
  stripeCustomerId      String?
  stripePaymentIntentId String?              @unique
  paidAmount            Float?
  refundedAmount        Float?
  payments              Payment[]
  paymentTransactions   PaymentTransaction[]
  Refund                Refund[]
  channel               Channel?             @relation(fields: [channelId], references: [id])
  organization          Organization         @relation(fields: [organizationId], references: [id])
  property              Property             @relation(fields: [propertyId], references: [id])
  room                  Room                 @relation(fields: [roomId], references: [id])
  user                  User?                @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([propertyId])
  @@index([roomId])
  @@index([userId])
  @@index([channelId])
}

/// Property settings scoped to a tenant or specific property
model PropertySettings {
  id                   String    @id @default(cuid())
  orgId                String?   @unique
  propertyType         String
  propertyName         String
  propertyPhone        String
  propertyEmail        String
  propertyWebsite      String?
  firstName            String
  lastName             String
  country              String
  street               String
  suite                String?
  city                 String
  state                String
  zip                  String
  latitude             Float
  longitude            Float
  isManuallyPositioned Boolean   @default(false)
  photos               Json?
  printHeader          String?
  printHeaderImage     String?
  description          Json
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  propertyId           String?   @unique
  property             Property? @relation(fields: [propertyId], references: [id])

  @@index([orgId])
  @@index([propertyId])
}

/// OTA or channel integration for external bookings
model Channel {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           ChannelType
  credentials    Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  reservations   Reservation[]

  @@index([organizationId])
}

/// Favorite rooms per user
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
  @@index([roomId])
}

/// Payments for a reservation
model Payment {
  id              String         @id @default(cuid())
  reservationId   String
  type            String
  method          String
  status          String
  amount          Float
  currency        String         @default("USD")
  gatewayTxId     String?
  notes           String?
  createdAt       DateTime       @default(now())
  description     String?
  paymentMethodId String?
  processedAt     DateTime?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  reservation     Reservation    @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
  @@index([status])
  @@index([type])
}

/// Stored payment methods for users/guests
model PaymentMethod {
  id                    String    @id @default(cuid())
  customerId            String
  stripePaymentMethodId String    @unique
  type                  String
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  isDefault             Boolean   @default(false)
  createdAt             DateTime  @default(now())
  payments              Payment[]

  @@index([customerId])
}

/// Record of refunds processed
model Refund {
  id             String      @id @default(cuid())
  stripeRefundId String      @unique
  reservationId  String
  amount         Float
  status         String
  createdAt      DateTime    @default(now())
  reason         String?
  reservation    Reservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
}

/// Webhook event tracking for idempotency and debugging
model WebhookEvent {
  id            String   @id @default(cuid())
  stripeEventId String   @unique
  eventType     String
  processedAt   DateTime @default(now())
  data          Json
  error         String?
  createdAt     DateTime @default(now())

  @@index([eventType])
  @@index([processedAt])
}

/// Payment transaction log for detailed tracking
model PaymentTransaction {
  id                    String      @id @default(cuid())
  reservationId         String
  stripePaymentIntentId String?
  stripeRefundId        String?
  type                  String
  amount                Float
  currency              String      @default("USD")
  status                String
  paymentMethod         String?
  failureReason         String?
  reason                String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  reservation           Reservation @relation(fields: [reservationId], references: [id])

  @@unique([reservationId, stripePaymentIntentId])
  @@index([reservationId])
  @@index([stripePaymentIntentId])
  @@index([type])
  @@index([status])
}

/// Pricing information for a room
model RoomPricing {
  id                String         @id @default(cuid())
  basePrice         Float
  weekdayPrice      Float?
  weekendPrice      Float?
  currency          String         @default("INR")
  mode              String         @default("MANUAL")
  availability      Int?
  minLOS            Int?
  maxLOS            Int?
  closedToArrival   Boolean        @default(false)
  closedToDeparture Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  roomId            String         @unique
  dailyRates        DailyRate[]
  room              Room           @relation("RoomPricingLink", fields: [roomId], references: [id])
  seasonalRates     SeasonalRate[]
}

/// Daily rate overrides for specific dates
model DailyRate {
  id                String       @id @default(cuid())
  roomTypeId        String
  date              DateTime     @db.Date
  basePrice         Float
  availability      Int?
  minLOS            Int?
  maxLOS            Int?
  closedToArrival   Boolean      @default(false)
  closedToDeparture Boolean      @default(false)
  restrictions      Json?
  notes             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  pricingId         String?
  pricing           RoomPricing? @relation(fields: [pricingId], references: [id])
  roomType          RoomType     @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  @@unique([roomTypeId, date])
  @@index([date])
  @@index([roomTypeId])
}

/// Seasonal rate multipliers
model SeasonalRate {
  id         String       @id @default(cuid())
  name       String
  startDate  DateTime     @db.Date
  endDate    DateTime     @db.Date
  multiplier Float
  isActive   Boolean      @default(true)
  roomTypeId String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  pricingId  String?
  pricing    RoomPricing? @relation(fields: [pricingId], references: [id])
  roomType   RoomType?    @relation(fields: [roomTypeId], references: [id])

  @@index([startDate, endDate])
  @@index([roomTypeId])
}

/// Rate change audit log
model RateChangeLog {
  id         String    @id @default(cuid())
  roomTypeId String
  date       DateTime? @db.Date
  oldPrice   Float?
  newPrice   Float
  changeType String
  reason     String?
  userId     String
  createdAt  DateTime  @default(now())
  roomType   RoomType  @relation(fields: [roomTypeId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([roomTypeId])
  @@index([date])
  @@index([createdAt])
}

enum PropertyRole {
  PROPERTY_MGR
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  SECURITY
  GUEST_SERVICES
  ACCOUNTANT
  IT_SUPPORT
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  PROPERTY_MGR
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  ACCOUNTANT
  OWNER
  IT_SUPPORT
  SECURITY
}

enum ReservationSource {
  WEBSITE
  PHONE
  WALK_IN
  CHANNEL
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  NO_SHOW
}

enum ChannelType {
  BOOKING_COM
  EXPEDIA
  AIRBNB
  VRBO
  OTHER
}

enum ShiftType {
  MORNING
  EVENING
  NIGHT
  FLEXIBLE
}
