generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tenant entity representing a property/organization
model Organization {
  id           String        @id @default(cuid())
  name         String
  domain       String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  channels     Channel[]
  reservations Reservation[]
  rooms        Room[]
  roomTypes    RoomType[]
  users        UserOrg[]

  @@index([domain])
}

/// Application user
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  favorites    Favorite[]
  reservations Reservation[]
  memberships  UserOrg[]
}

/// Join table: user membership in a tenant with a role
model UserOrg {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model RoomType {
  id                   String       @id @default(cuid())
  organizationId       String
  name                 String
  abbreviation         String?
  privateOrDorm        String       @default("private")
  physicalOrVirtual    String       @default("physical")
  maxOccupancy         Int          @default(1)
  maxAdults            Int          @default(1)
  maxChildren          Int          @default(0)
  adultsIncluded       Int          @default(1)
  childrenIncluded     Int          @default(0)
  description          String?
  amenities            String[]
  customAmenities      String[]
  featuredImageUrl     String?
  additionalImageUrls  String[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  organization         Organization @relation(fields: [organizationId], references: [id])
  rooms                Room[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

model Room {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           String
  capacity       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  imageUrl       String?
  pricingId      String?
  sizeSqFt       Int?
  description    String?       // Individual room description
  doorlockId     String?       // Door lock integration ID
  roomTypeId     String?       // Link to RoomType
  favorites      Favorite[]
  reservations   Reservation[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  roomType       RoomType?     @relation(fields: [roomTypeId], references: [id])
  galleryImages  RoomImage[]
  pricing        RoomPricing?  @relation("RoomPricingLink")
  amenities      Amenity[]     @relation("RoomAmenities")

  @@index([organizationId])
}

model Amenity {
  id    String @id @default(cuid())
  name  String @unique
  rooms Room[] @relation("RoomAmenities")
}

/// Gallery images for a room
model RoomImage {
  id      String  @id @default(cuid())
  roomId  String
  url     String
  caption String?
  sort    Int?
  room    Room    @relation(fields: [roomId], references: [id])
}

/// Reservation or booking entity
model Reservation {
  id             String            @id @default(cuid())
  organizationId String
  roomId         String
  userId         String?
  guestName      String?
  checkIn        DateTime
  checkOut       DateTime
  source         ReservationSource
  channelId      String?
  status         ReservationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  adults         Int               @default(1)
  children       Int               @default(0)
  notes          String?
  email          String?
  idNumber       String?
  idType         String?
  issuingCountry String?
  phone          String?
  Payment        Payment[]
  channel        Channel?          @relation(fields: [channelId], references: [id])
  organization   Organization      @relation(fields: [organizationId], references: [id])
  room           Room              @relation(fields: [roomId], references: [id])
  user           User?             @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([roomId])
  @@index([userId])
  @@index([channelId])
}

/// Property settings scoped to a tenant
model PropertySettings {
  id               String   @id @default(cuid())
  orgId            String   @unique
  propertyType     String
  propertyName     String
  propertyPhone    String
  propertyEmail    String
  propertyWebsite  String?
  firstName        String
  lastName         String
  country          String
  street           String
  suite            String?
  city             String
  state            String
  zip              String
  latitude         Float
  longitude        Float
  photos           Json?
  printHeader      String?
  printHeaderImage String?
  description      Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

/// OTA or channel integration for external bookings
model Channel {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           ChannelType
  credentials    Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  reservations   Reservation[]

  @@index([organizationId])
}

/// Favorite rooms per user
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
  @@index([roomId])
}

/// Payments for a reservation
model Payment {
  id            String      @id @default(cuid())
  reservationId String
  type          String
  method        String
  status        String
  amount        Float
  currency      String      @default("INR")
  gatewayTxId   String?
  notes         String?
  createdAt     DateTime    @default(now())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model RoomPricing {
  id        String   @id @default(cuid())
  basePrice Float
  currency  String   @default("INR")
  mode      String   @default("MANUAL")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String   @unique
  room      Room     @relation("RoomPricingLink", fields: [roomId], references: [id])
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  PROPERTY_MGR
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  ACCOUNTANT
  OWNER
  IT_SUPPORT
}

enum ReservationSource {
  WEBSITE
  PHONE
  WALK_IN
  CHANNEL
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  NO_SHOW
}

enum ChannelType {
  BOOKING_COM
  EXPEDIA
  AIRBNB
  VRBO
  OTHER
}
