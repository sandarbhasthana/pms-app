generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tenant entity representing an organization that can have multiple properties
model Organization {
  id                       String               @id @default(cuid())
  name                     String
  domain                   String?              @unique
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  stripeAccountId          String?
  stripeChargesEnabled     Boolean              @default(false)
  stripeOnboardingComplete Boolean              @default(false)
  contactAddress           String?
  contactPhone             String?
  industry                 String?
  isActive                 Boolean              @default(true)
  size                     String?
  businessRules            BusinessRule[]
  channels                 Channel[]
  invitations              InvitationToken[]
  properties               Property[]
  reservations             Reservation[]
  rooms                    Room[]
  roomTypes                RoomType[]
  users                    UserOrg[]
  errorAlerts              ErrorAlert[]
  errorLogs                ErrorLog[]
  notificationLogs         NotificationLog[]
  notificationRules        NotificationRule[]
  onboardingTracking       OnboardingTracking?
  metrics                  OrganizationMetrics?
  performanceMetrics       PerformanceMetric[]
  queueMetrics             QueueMetric[]
  activities               SystemActivity[]

  @@index([domain])
  @@index([stripeAccountId])
}

/// Property entity representing individual properties within an organization
model Property {
  id                      String              @id @default(cuid())
  organizationId          String
  name                    String
  // Address fields - stored separately for proper formatting and querying
  suite                   String?             // Apt/Suite #, Floor
  street                  String?             // Street Address
  city                    String?             // City
  state                   String?             // State/Province
  zipCode                 String?             // ZIP/Postal Code
  country                 String?             // Country
  address                 String?             // Legacy: full address string (kept for backward compatibility)
  phone                   String?
  email                   String?
  timezone                String              @default("UTC")
  currency                String              @default("USD")
  isActive                Boolean             @default(true)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  isDefault               Boolean             @default(false)
  businessRulesEnabled    Boolean             @default(false)
  businessRulesConfig     Json?               @default("{}")
  businessRules           BusinessRule[]
  invitations             InvitationToken[]
  organization            Organization        @relation(fields: [organizationId], references: [id])
  settings                PropertySettings?
  reservations            Reservation[]
  rooms                   Room[]
  roomTypes               RoomType[]
  userProperties          UserProperty[]
  errorAlerts             ErrorAlert[]
  errorLogs               ErrorLog[]
  notificationLogs        NotificationLog[]
  notificationRules       NotificationRule[]
  performanceMetrics      PerformanceMetric[]
  queueMetrics            QueueMetric[]
  statusHistoryLogs       ReservationStatusHistory[]
  auditLogs               ReservationAuditLog[]
  approvalRequests        ApprovalRequest[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([organizationId, isDefault])
}

/// Application user
model User {
  id                       String                       @id @default(cuid())
  email                    String                       @unique
  name                     String?
  image                    String?
  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt
  phone                    String?
  isActive                 Boolean                      @default(true)
  password                 String?
  createdRules             BusinessRule[]               @relation("BusinessRuleCreator")
  updatedRules             BusinessRule[]               @relation("BusinessRuleUpdater")
  favorites                Favorite[]
  sentInvitations          InvitationToken[]            @relation("InvitationCreator")
  rateChangeLogs           RateChangeLog[]
  reservations             Reservation[]
  memberships              UserOrg[]
  userProperties           UserProperty[]
  createdErrorAlerts       ErrorAlert[]                 @relation("ErrorAlertCreator")
  assignedErrors           ErrorLog[]                   @relation("ErrorLogAssignee")
  resolvedErrors           ErrorLog[]                   @relation("ErrorLogResolver")
  errorLogs                ErrorLog[]                   @relation("ErrorLogUser")
  errorOccurrences         ErrorOccurrence[]
  notificationLogs         NotificationLog[]
  createdNotificationRules NotificationRule[]           @relation("NotificationRuleCreator")
  updatedNotificationRules NotificationRule[]           @relation("NotificationRuleUpdater")
  performanceMetrics       PerformanceMetric[]
  systemActivities         SystemActivity[]
  notificationPreferences  UserNotificationPreferences?
  statusHistoryChanges     ReservationStatusHistory[]
  auditLogs                ReservationAuditLog[]        @relation("AuditLogUser")
  approvalRequestsCreated  ApprovalRequest[]            @relation("ApprovalRequestedBy")
  approvalRequestsApproved ApprovalRequest[]            @relation("ApprovalApprovedBy")
}

/// Join table: user membership in a tenant with a role
model UserOrg {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isActive       Boolean      @default(true)
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

/// Join table: user access to specific properties with property-level roles
model UserProperty {
  id         String       @id @default(cuid())
  userId     String
  propertyId String
  role       PropertyRole
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  shift      ShiftType?
  property   Property     @relation(fields: [propertyId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

/// Invitation tokens for user management
model InvitationToken {
  id             String        @id @default(cuid())
  email          String
  organizationId String
  role           UserRole
  propertyId     String?
  propertyRole   PropertyRole?
  shift          ShiftType?
  phone          String?
  token          String        @unique
  expiresAt      DateTime
  createdBy      String
  createdAt      DateTime      @default(now())
  used           Boolean       @default(false)
  usedAt         DateTime?
  creator        User          @relation("InvitationCreator", fields: [createdBy], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])
  property       Property?     @relation(fields: [propertyId], references: [id])

  @@index([token])
  @@index([email])
  @@index([organizationId])
  @@index([propertyId])
}

/// Room type entity
model RoomType {
  id                  String          @id @default(cuid())
  organizationId      String
  name                String
  abbreviation        String?
  privateOrDorm       String          @default("private")
  physicalOrVirtual   String          @default("physical")
  maxOccupancy        Int             @default(1)
  maxAdults           Int             @default(1)
  maxChildren         Int             @default(0)
  adultsIncluded      Int             @default(1)
  childrenIncluded    Int             @default(0)
  description         String?
  amenities           String[]
  customAmenities     String[]
  featuredImageUrl    String?
  additionalImageUrls String[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  availability        Int?
  basePrice           Float?
  closedToArrival     Boolean         @default(false)
  closedToDeparture   Boolean         @default(false)
  currency            String          @default("INR")
  maxLOS              Int?
  minLOS              Int?
  weekdayPrice        Float?
  weekendPrice        Float?
  propertyId          String
  dailyRates          DailyRate[]
  rateChangeLogs      RateChangeLog[]
  rooms               Room[]
  organization        Organization    @relation(fields: [organizationId], references: [id])
  property            Property        @relation(fields: [propertyId], references: [id])
  seasonalRates       SeasonalRate[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([propertyId])
}

/// Room entity
model Room {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           String
  capacity       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  imageUrl       String?
  pricingId      String?
  sizeSqFt       Int?
  description    String?
  doorlockId     String?
  roomTypeId     String?
  propertyId     String
  favorites      Favorite[]
  reservations   Reservation[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  property       Property      @relation(fields: [propertyId], references: [id])
  roomType       RoomType?     @relation(fields: [roomTypeId], references: [id])
  galleryImages  RoomImage[]
  pricing        RoomPricing?  @relation("RoomPricingLink")
  amenities      Amenity[]     @relation("RoomAmenities")

  @@index([organizationId])
  @@index([propertyId])
}

/// Amenities available in a room
model Amenity {
  id    String @id @default(cuid())
  name  String @unique
  rooms Room[] @relation("RoomAmenities")
}

/// Gallery images for a room
model RoomImage {
  id      String  @id @default(cuid())
  roomId  String
  url     String
  caption String?
  sort    Int?
  room    Room    @relation(fields: [roomId], references: [id])
}

/// Reservation or booking entity
model Reservation {
  id                    String                     @id @default(cuid())
  organizationId        String
  roomId                String
  userId                String?
  guestName             String?
  checkIn               DateTime
  checkOut              DateTime
  source                ReservationSource
  channelId             String?
  status                ReservationStatus          @default(CONFIRMATION_PENDING)
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  adults                Int                        @default(1)
  children              Int                        @default(0)
  notes                 String?
  email                 String?
  idNumber              String?
  idType                String?
  issuingCountry        String?
  phone                 String?
  propertyId            String
  amountCaptured        Int?
  amountHeld            Int?
  depositAmount         Int?
  depositDueDate        DateTime?
  finalPaymentDue       DateTime?
  paymentStatus         String?
  paymentTerms          String?
  stripeCustomerId      String?
  stripePaymentIntentId String?                    @unique
  paidAmount            Float?
  refundedAmount        Float?
  checkedInAt           DateTime?
  checkedOutAt          DateTime?
  statusUpdatedBy       String?
  statusUpdatedAt       DateTime                   @default(now()) @updatedAt
  statusChangeReason    String?
  deletedAt             DateTime?                  // Soft-delete timestamp for CANCELLED and NO_SHOW reservations
  payments              Payment[]
  paymentTransactions   PaymentTransaction[]
  Refund                Refund[]
  channel               Channel?                   @relation(fields: [channelId], references: [id])
  organization          Organization               @relation(fields: [organizationId], references: [id])
  property              Property                   @relation(fields: [propertyId], references: [id])
  room                  Room                       @relation(fields: [roomId], references: [id])
  user                  User?                      @relation(fields: [userId], references: [id])
  statusHistory         ReservationStatusHistory[]
  auditLogs             ReservationAuditLog[]
  approvalRequests      ApprovalRequest[]
  addons                ReservationAddon[]

  @@index([organizationId])
  @@index([propertyId])
  @@index([roomId])
  @@index([userId])
  @@index([channelId])
  @@index([status])
  @@index([statusUpdatedAt])
  @@index([deletedAt])
}

/// Add-ons for a reservation (extra bed, breakfast, etc.)
model ReservationAddon {
  id            String      @id @default(cuid())
  reservationId String
  type          String      // 'extra_bed', 'breakfast', 'custom', etc.
  name          String      // Display name (e.g., "Extra Bed", "Breakfast")
  description   String?     // Optional description
  price         Float       // Price per unit
  quantity      Int         @default(1) // Quantity of this add-on
  totalAmount   Float       // price * quantity
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
  @@index([type])
}

/// Audit trail for reservation status changes
model ReservationStatusHistory {
  id             String             @id @default(cuid())
  reservationId  String
  propertyId     String
  previousStatus ReservationStatus?
  newStatus      ReservationStatus
  changedBy      String?
  changeReason   String?
  notes          String?
  changedAt      DateTime           @default(now())
  isAutomatic    Boolean            @default(false)
  reservation    Reservation        @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  user           User?              @relation(fields: [changedBy], references: [id], onDelete: SetNull)
  property       Property           @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([reservationId])
  @@index([propertyId])
  @@index([changedAt])
  @@index([newStatus])
  @@index([changedBy])
}

/// Comprehensive audit trail for all reservation changes
model ReservationAuditLog {
  id            String    @id @default(cuid())
  reservationId String
  propertyId    String
  action        String    // CREATED, FIELD_UPDATED, NOTE_ADDED, PAYMENT_MADE, ADDON_ADDED, ADDON_REMOVED
  fieldName     String?   // Which field was changed (e.g., "guestName", "checkIn", "notes")
  oldValue      String?   // Previous value
  newValue      String?   // New value
  description   String?   // Human-readable description of the change
  changedBy     String?   // User ID who made the change
  changedAt     DateTime  @default(now())
  metadata      String?   // JSON metadata for additional context

  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  user          User?       @relation("AuditLogUser", fields: [changedBy], references: [id], onDelete: SetNull)
  property      Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([reservationId])
  @@index([propertyId])
  @@index([changedAt])
  @@index([action])
  @@index([changedBy])
}

/// Approval requests for actions requiring manager approval (e.g., early check-in)
model ApprovalRequest {
  id              String    @id @default(cuid())
  reservationId   String
  propertyId      String
  requestType     String    // EARLY_CHECKIN, LATE_CHECKOUT, CANCELLATION, etc.
  requestReason   String    // Human-readable reason for the request
  requestedBy     String    // User ID who requested the approval
  requestedAt     DateTime  @default(now())
  status          String    @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedBy      String?   // User ID who approved/rejected
  approvedAt      DateTime?
  approvalNotes   String?   // Notes from the approver
  metadata        String?   // JSON metadata with additional context (e.g., old/new values)

  reservation     Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  property        Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  requestedByUser User        @relation("ApprovalRequestedBy", fields: [requestedBy], references: [id], onDelete: Cascade)
  approvedByUser  User?       @relation("ApprovalApprovedBy", fields: [approvedBy], references: [id], onDelete: SetNull)

  @@index([reservationId])
  @@index([propertyId])
  @@index([status])
  @@index([requestedAt])
  @@index([requestedBy])
  @@index([approvedBy])
}

/// Property settings scoped to a tenant or specific property
model PropertySettings {
  id                          String    @id @default(cuid())
  orgId                       String?   @unique
  propertyType                String
  propertyName                String
  propertyPhone               String
  propertyEmail               String
  propertyWebsite             String?
  firstName                   String
  lastName                    String
  country                     String
  street                      String
  suite                       String?
  city                        String
  state                       String
  zip                         String
  latitude                    Float
  longitude                   Float
  isManuallyPositioned        Boolean   @default(false)
  photos                      Json?
  printHeader                 String?
  printHeaderImage            String?
  description                 Json
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  propertyId                  String?   @unique
  autoConfirmThreshold        Int       @default(50)
  checkInTime                 String    @default("15:00")
  checkOutTime                String    @default("11:00")
  enableAutoCheckin           Boolean   @default(true)
  enableAutoConfirmation      Boolean   @default(true)
  enableLateCheckoutDetection Boolean   @default(true)
  enableNoShowDetection       Boolean   @default(true)
  lateCheckoutGraceHours      Int       @default(1)
  noShowGraceHours            Int       @default(6)
  notifyOnAutomationFailure   Boolean   @default(true)
  notifyOnLateCheckout        Boolean   @default(true)
  notifyOnNoShow              Boolean   @default(true)
  sameDayPaymentRequired      Int       @default(100)
  property                    Property? @relation(fields: [propertyId], references: [id])

  @@index([orgId])
  @@index([propertyId])
}

/// OTA or channel integration for external bookings
model Channel {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           ChannelType
  credentials    Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  reservations   Reservation[]

  @@index([organizationId])
}

/// Favorite rooms per user
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
  @@index([roomId])
}

/// Payments for a reservation
model Payment {
  id              String         @id @default(cuid())
  reservationId   String
  type            String
  method          String
  status          String
  amount          Float
  currency        String         @default("USD")
  gatewayTxId     String?
  notes           String?
  createdAt       DateTime       @default(now())
  description     String?
  paymentMethodId String?
  processedAt     DateTime?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  reservation     Reservation    @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
  @@index([status])
  @@index([type])
}

/// Stored payment methods for users/guests
model PaymentMethod {
  id                    String    @id @default(cuid())
  customerId            String
  stripePaymentMethodId String    @unique
  type                  String
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  cardholderName        String?
  isDefault             Boolean   @default(false)
  gradientIndex         Int       @default(0)
  createdAt             DateTime  @default(now())
  payments              Payment[]

  @@index([customerId])
}

/// Record of refunds processed
model Refund {
  id             String      @id @default(cuid())
  stripeRefundId String      @unique
  reservationId  String
  amount         Float
  status         String
  createdAt      DateTime    @default(now())
  reason         String?
  reservation    Reservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
}

/// Webhook event tracking for idempotency and debugging
model WebhookEvent {
  id            String   @id @default(cuid())
  stripeEventId String   @unique
  eventType     String
  processedAt   DateTime @default(now())
  data          Json
  error         String?
  createdAt     DateTime @default(now())

  @@index([eventType])
  @@index([processedAt])
}

/// Payment transaction log for detailed tracking
model PaymentTransaction {
  id                    String      @id @default(cuid())
  reservationId         String
  stripePaymentIntentId String?
  stripeRefundId        String?
  type                  String
  amount                Float
  currency              String      @default("USD")
  status                String
  paymentMethod         String?
  failureReason         String?
  reason                String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  reservation           Reservation @relation(fields: [reservationId], references: [id])

  @@unique([reservationId, stripePaymentIntentId])
  @@index([reservationId])
  @@index([stripePaymentIntentId])
  @@index([type])
  @@index([status])
}

/// Pricing information for a room
model RoomPricing {
  id                String         @id @default(cuid())
  basePrice         Float
  weekdayPrice      Float?
  weekendPrice      Float?
  currency          String         @default("INR")
  mode              String         @default("MANUAL")
  availability      Int?
  minLOS            Int?
  maxLOS            Int?
  closedToArrival   Boolean        @default(false)
  closedToDeparture Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  roomId            String         @unique
  dailyRates        DailyRate[]
  room              Room           @relation("RoomPricingLink", fields: [roomId], references: [id])
  seasonalRates     SeasonalRate[]
}

/// Daily rate overrides for specific dates
model DailyRate {
  id                String       @id @default(cuid())
  roomTypeId        String
  date              DateTime     @db.Date
  basePrice         Float
  availability      Int?
  minLOS            Int?
  maxLOS            Int?
  closedToArrival   Boolean      @default(false)
  closedToDeparture Boolean      @default(false)
  restrictions      Json?
  notes             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  pricingId         String?
  pricing           RoomPricing? @relation(fields: [pricingId], references: [id])
  roomType          RoomType     @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)

  @@unique([roomTypeId, date])
  @@index([date])
  @@index([roomTypeId])
}

/// Seasonal rate multipliers
model SeasonalRate {
  id         String       @id @default(cuid())
  name       String
  startDate  DateTime     @db.Date
  endDate    DateTime     @db.Date
  multiplier Float
  isActive   Boolean      @default(true)
  roomTypeId String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  pricingId  String?
  pricing    RoomPricing? @relation(fields: [pricingId], references: [id])
  roomType   RoomType?    @relation(fields: [roomTypeId], references: [id])

  @@index([startDate, endDate])
  @@index([roomTypeId])
}

/// Rate change audit log
model RateChangeLog {
  id         String    @id @default(cuid())
  roomTypeId String
  date       DateTime? @db.Date
  oldPrice   Float?
  newPrice   Float
  changeType String
  reason     String?
  userId     String
  createdAt  DateTime  @default(now())
  roomType   RoomType  @relation(fields: [roomTypeId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([roomTypeId])
  @@index([date])
  @@index([createdAt])
}

/// Business rules for dynamic pricing and automation
model BusinessRule {
  id             String               @id @default(cuid())
  name           String
  description    String?
  category       BusinessRuleCategory @default(PRICING)
  priority       Int                  @default(100)
  isActive       Boolean              @default(true)
  isAIGenerated  Boolean              @default(false)
  propertyId     String?
  organizationId String
  createdBy      String
  updatedBy      String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  conditions     Json
  actions        Json
  metadata       Json?
  creator        User                 @relation("BusinessRuleCreator", fields: [createdBy], references: [id])
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  property       Property?            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  updater        User?                @relation("BusinessRuleUpdater", fields: [updatedBy], references: [id])
  executions     RuleExecution[]
  performance    RulePerformance?

  @@index([organizationId])
  @@index([propertyId])
  @@index([category])
  @@index([isActive])
  @@index([priority])
  @@index([createdAt])
}

/// Rule execution history and performance tracking
model RuleExecution {
  id              String       @id @default(cuid())
  ruleId          String
  executedAt      DateTime     @default(now())
  context         Json
  result          Json
  success         Boolean      @default(true)
  errorMessage    String?
  executionTimeMs Int?
  rule            BusinessRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([executedAt])
  @@index([success])
}

/// Rule performance metrics and analytics
model RulePerformance {
  id                   String       @id @default(cuid())
  ruleId               String       @unique
  totalExecutions      Int          @default(0)
  successfulExecutions Int          @default(0)
  failedExecutions     Int          @default(0)
  avgExecutionTimeMs   Float?
  totalRevenueImpact   Float?       @default(0)
  lastExecutedAt       DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  metrics              Json?
  rule                 BusinessRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([totalExecutions])
  @@index([totalRevenueImpact])
  @@index([lastExecutedAt])
}

model NotificationRule {
  id             String                @id @default(cuid())
  eventType      NotificationEventType
  priority       NotificationPriority  @default(immediate)
  targetRoles    Json
  channels       Json
  isActive       Boolean               @default(true)
  conditions     Json?
  template       Json
  throttling     Json?
  propertyId     String?
  organizationId String
  createdBy      String
  updatedBy      String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  creator        User                  @relation("NotificationRuleCreator", fields: [createdBy], references: [id])
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  property       Property?             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  updater        User?                 @relation("NotificationRuleUpdater", fields: [updatedBy], references: [id])

  @@map("notification_rules")
}

model NotificationLog {
  id             String                @id @default(cuid())
  eventType      NotificationEventType
  priority       NotificationPriority
  recipientId    String
  recipientRole  EmployeeRole
  channel        NotificationChannel
  subject        String
  message        String
  data           Json?
  propertyId     String
  organizationId String
  ruleId         String?
  createdAt      DateTime              @default(now())
  scheduledFor   DateTime?
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  status         NotificationStatus    @default(pending)
  errorMessage   String?
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  property       Property              @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  recipient      User                  @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notification_logs")
}

model UserNotificationPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  channels           Json
  eventSubscriptions Json
  quietHours         Json?
  phoneNumber        String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

model ErrorLog {
  id             String            @id @default(cuid())
  stackTrace     String?
  userId         String?
  organizationId String?
  endpoint       String?
  userAgent      String?
  ipAddress      String?
  resolvedAt     DateTime?
  resolvedBy     String?
  resolution     String?
  createdAt      DateTime          @default(now())
  assignedTo     String?
  category       ErrorCategory     @default(system)
  context        Json?
  errorCode      String?
  message        String
  propertyId     String?
  requestId      String?
  service        String?
  sessionId      String?
  severity       ErrorSeverity     @default(medium)
  status         ErrorStatus       @default(open)
  title          String
  updatedAt      DateTime          @updatedAt
  assignee       User?             @relation("ErrorLogAssignee", fields: [assignedTo], references: [id])
  organization   Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  property       Property?         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  resolver       User?             @relation("ErrorLogResolver", fields: [resolvedBy], references: [id])
  user           User?             @relation("ErrorLogUser", fields: [userId], references: [id])
  occurrences    ErrorOccurrence[]

  @@index([severity, createdAt])
  @@index([category, createdAt])
  @@index([organizationId, createdAt])
  @@index([propertyId, createdAt])
  @@index([status])
  @@map("error_logs")
}

model ErrorOccurrence {
  id         String   @id @default(cuid())
  errorLogId String
  occurredAt DateTime @default(now())
  context    Json?
  userId     String?
  requestId  String?
  errorLog   ErrorLog @relation(fields: [errorLogId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@index([errorLogId, occurredAt])
  @@map("error_occurrences")
}

model ErrorAlert {
  id             String          @id @default(cuid())
  name           String
  description    String?
  isActive       Boolean         @default(true)
  severity       ErrorSeverity[]
  category       ErrorCategory[]
  services       String[]
  threshold      Int             @default(1)
  timeWindow     Int             @default(300)
  cooldown       Int             @default(3600)
  channels       Json
  recipients     Json
  propertyId     String?
  organizationId String
  createdBy      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastTriggered  DateTime?
  creator        User            @relation("ErrorAlertCreator", fields: [createdBy], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  property       Property?       @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("error_alerts")
}

/// Performance monitoring and metrics
model PerformanceMetric {
  id             String                @id @default(cuid())
  metricType     PerformanceMetricType
  name           String
  value          Float
  unit           String
  tags           Json?
  service        String?
  endpoint       String?
  operation      String?
  timestamp      DateTime              @default(now())
  duration       Int?
  organizationId String?
  propertyId     String?
  userId         String?
  organization   Organization?         @relation(fields: [organizationId], references: [id])
  property       Property?             @relation(fields: [propertyId], references: [id])
  user           User?                 @relation(fields: [userId], references: [id])

  @@index([metricType, timestamp])
  @@index([service, timestamp])
  @@index([organizationId, timestamp])
  @@index([propertyId, timestamp])
  @@map("performance_metrics")
}

/// Queue job monitoring and statistics
model QueueMetric {
  id             String         @id @default(cuid())
  queueName      String
  jobId          String?
  jobType        String
  status         QueueJobStatus
  createdAt      DateTime       @default(now())
  startedAt      DateTime?
  completedAt    DateTime?
  failedAt       DateTime?
  duration       Int?
  waitTime       Int?
  attempts       Int            @default(1)
  maxAttempts    Int            @default(3)
  priority       Int            @default(0)
  delay          Int?
  errorMessage   String?
  stackTrace     String?
  data           Json?
  result         Json?
  organizationId String?
  propertyId     String?
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  property       Property?      @relation(fields: [propertyId], references: [id])

  @@index([queueName, status, createdAt])
  @@index([status, createdAt])
  @@index([organizationId, createdAt])
  @@map("queue_metrics")
}

/// System-wide metrics for SUPER_ADMIN dashboard
model SystemMetrics {
  id                 String   @id @default(cuid())
  date               DateTime @unique @default(now()) @db.Date
  totalOrganizations Int      @default(0)
  totalUsers         Int      @default(0)
  totalProperties    Int      @default(0)
  totalReservations  Int      @default(0)
  activeUsers        Int      @default(0)
  revenue            Decimal  @default(0) @db.Decimal(10, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([date])
  @@map("system_metrics")
}

/// Per-organization metrics tracking
model OrganizationMetrics {
  id                   String       @id @default(cuid())
  organizationId       String       @unique
  totalUsers           Int          @default(0)
  totalProperties      Int          @default(0)
  totalReservations    Int          @default(0)
  totalRevenue         Decimal      @default(0) @db.Decimal(10, 2)
  lastActivity         DateTime?
  monthlyActiveUsers   Int          @default(0)
  onboardingCompleted  Boolean      @default(false)
  firstPropertyCreated Boolean      @default(false)
  firstReservationMade Boolean      @default(false)
  stripeConnected      Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("organization_metrics")
}

/// System activity audit trail
model SystemActivity {
  id             String             @id @default(cuid())
  activityType   SystemActivityType
  description    String
  metadata       Json?
  performedBy    String?
  organizationId String?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime           @default(now())
  organization   Organization?      @relation(fields: [organizationId], references: [id])
  user           User?              @relation(fields: [performedBy], references: [id])

  @@index([activityType])
  @@index([organizationId])
  @@index([performedBy])
  @@index([createdAt])
  @@map("system_activities")
}

/// Detailed onboarding flow tracking
model OnboardingTracking {
  id                     String       @id @default(cuid())
  organizationId         String       @unique
  startedAt              DateTime     @default(now())
  completedAt            DateTime?
  orgDetailsCompleted    Boolean      @default(false)
  orgDetailsCompletedAt  DateTime?
  adminUserCompleted     Boolean      @default(false)
  adminUserCompletedAt   DateTime?
  reviewCompleted        Boolean      @default(false)
  reviewCompletedAt      DateTime?
  firstLoginAt           DateTime?
  firstPropertyCreatedAt DateTime?
  firstReservationAt     DateTime?
  stripeConnectedAt      DateTime?
  timeToComplete         Int?
  timeToFirstProperty    Int?
  timeToFirstReservation Int?
  isAbandoned            Boolean      @default(false)
  abandonedAt            DateTime?
  abandonedStep          String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  organization           Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([startedAt])
  @@index([completedAt])
  @@map("onboarding_tracking")
}

/// System health and performance monitoring
model SystemHealth {
  id                  String   @id @default(cuid())
  timestamp           DateTime @default(now())
  avgResponseTime     Float
  errorRate           Float
  uptime              Float
  dbConnections       Int
  dbQueryTime         Float
  memoryUsage         Float
  cpuUsage            Float
  activeUsers         Int
  ongoingReservations Int
  createdAt           DateTime @default(now())

  @@index([timestamp])
  @@map("system_health")
}

/// Enum for business rule categories
enum BusinessRuleCategory {
  PRICING
  AVAILABILITY
  RESTRICTIONS
  NOTIFICATIONS
  AUTOMATION
  REVENUE_OPTIMIZATION
}

enum NotificationEventType {
  room_service_request
  room_change_request
  special_accommodation_request
  room_maintenance_request
  reservation_status_change
  booking_modification
  reservation_cancellation
  no_show_detected
  checkin_time_change
  checkout_time_change
  payment_failure
  credit_card_declined
  refund_processing_issue
  chargeback_notification
  cleaning_request
  housekeeping_status_update
  supply_request
  lost_found_item
  equipment_failure
  repair_request
  safety_issue
  preventive_maintenance_due
  daily_revenue_summary
  booking_performance_summary
  guest_satisfaction_summary
  staff_performance_summary
  room_occupancy_summary
}

enum NotificationPriority {
  immediate
  daily_summary
}

enum NotificationChannel {
  in_app
  email
  sms
}

enum EmployeeRole {
  front_desk
  housekeeping
  maintenance
  manager
  admin
}

enum NotificationStatus {
  pending
  sent
  delivered
  read
  failed
}

enum PerformanceMetricType {
  api_response_time
  api_throughput
  db_query_time
  db_connection_count
  queue_processing_time
  queue_wait_time
  memory_usage
  cpu_usage
  disk_usage
  error_rate
  cache_hit_rate
  custom
}

enum QueueJobStatus {
  waiting
  active
  completed
  failed
  delayed
  paused
  stuck
}

enum ErrorSeverity {
  critical
  high
  medium
  low
  info
}

enum ErrorCategory {
  system
  database
  payment
  queue
  api
  validation
  authentication
  authorization
  business_logic
  integration
  notification
  reservation
  user_action
}

enum ErrorStatus {
  open
  in_progress
  resolved
  ignored
  duplicate
}

enum PropertyRole {
  PROPERTY_MGR
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  SECURITY
  GUEST_SERVICES
  ACCOUNTANT
  IT_SUPPORT
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  PROPERTY_MGR
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  ACCOUNTANT
  OWNER
  IT_SUPPORT
  SECURITY
}

enum ReservationSource {
  WEBSITE
  PHONE
  WALK_IN
  CHANNEL
}

enum ReservationStatus {
  CONFIRMATION_PENDING
  CONFIRMED
  IN_HOUSE
  CHECKED_OUT
  NO_SHOW
  CANCELLED
}

enum ChannelType {
  BOOKING_COM
  EXPEDIA
  AIRBNB
  VRBO
  OTHER
}

enum ShiftType {
  MORNING
  EVENING
  NIGHT
  FLEXIBLE
}

/// System activity types enum
enum SystemActivityType {
  ORGANIZATION_CREATED
  ORGANIZATION_DELETED
  ORGANIZATION_UPDATED
  USER_CREATED
  USER_DELETED
  USER_UPDATED
  PROPERTY_CREATED
  PROPERTY_DELETED
  RESERVATION_CREATED
  RESERVATION_CANCELLED
  STRIPE_CONNECTED
  STRIPE_DISCONNECTED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_CANCELLED
  LOGIN_SUCCESS
  LOGIN_FAILED
  PASSWORD_RESET
  ONBOARDING_STARTED
  ONBOARDING_COMPLETED
  ONBOARDING_ABANDONED
  SYSTEM_ERROR
  SYSTEM_MAINTENANCE
}
