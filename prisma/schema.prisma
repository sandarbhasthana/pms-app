// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Tenant entity representing a property/organization
model Organization {
  id           String        @id @default(cuid())
  name         String
  domain       String?       @unique
  users        UserOrg[] // memberships
  rooms        Room[]
  channels     Channel[] // OTA/channel integrations
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([domain])
}

/// Application user
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  image        String?
  memberships  UserOrg[]
  reservations Reservation[] // web-booked by logged-in users
  favorites    Favorite[] // rooms this user has favorited
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

/// Join table: user membership in a tenant with a role
model UserOrg {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           UserRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

enum UserRole {
  SUPER_ADMIN // global system administrator
  ORG_ADMIN // organization-level administrator
  PROPERTY_MGR // property manager
  FRONT_DESK // front desk staff
  HOUSEKEEPING // housekeeping staff
  MAINTENANCE // maintenance staff
  ACCOUNTANT // finance/accounting role
  OWNER // property or company owner
  IT_SUPPORT // technical support/admin
}

/// Room entity scoped to a tenant
model Room {
  id             String        @id @default(cuid())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  name           String
  type           String // e.g., Deluxe, Suite
  capacity       Int
  imageUrl       String? // optional photo or floorplan URL
  reservations   Reservation[]
  favorites      Favorite[] // users who favorited this room
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([organizationId])
}

// Reservation or booking entity
model Reservation {
  id             String            @id @default(cuid())
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
  room           Room              @relation(fields: [roomId], references: [id])
  roomId         String
  user           User?             @relation(fields: [userId], references: [id])
  userId         String? // only for WEBSITE source when logged-in
  guestName      String? // for walk-ins or phone bookings
  phone          String? // guest contact phone
  email          String? // guest contact email
  idType         String? // passport, driver's license, national ID
  idNumber       String? // ID document number
  issuingCountry String? // country that issued the ID
  checkIn        DateTime
  checkOut       DateTime
  adults         Int               @default(1)
  children       Int               @default(0)
  source         ReservationSource
  channel        Channel?          @relation(fields: [channelId], references: [id])
  channelId      String? // for OTA/channel bookings
  status         ReservationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  notes          String? // internal notes for front desk use
  Payment        Payment[]

  @@index([organizationId])
  @@index([roomId])
  @@index([userId])
  @@index([channelId])
}

enum ReservationSource {
  WEBSITE // via organization website (requires login)
  PHONE // booked over the phone
  WALK_IN // in-person check-in
  CHANNEL // via OTA/channel manager
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  NO_SHOW
}

/// OTA or channel integration for external bookings
model Channel {
  id             String        @id @default(cuid())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  name           String // e.g., Booking.com, Expedia
  type           ChannelType
  credentials    Json? // API keys, tokens, config
  reservations   Reservation[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([organizationId])
}

enum ChannelType {
  BOOKING_COM
  EXPEDIA
  AIRBNB
  VRBO
  OTHER
}

/// Favorite rooms per user
model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  createdAt DateTime @default(now())

  @@unique([userId, roomId])
  @@index([roomId])
}

/// Payments for a reservation
model Payment {
  id            String      @id @default(cuid())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String
  type          String // charge, refund, hold
  method        String // stripe, razorpay, cash, upi, etc.
  status        String // succeeded, refunded, authorized, failed
  amount        Float
  currency      String      @default("INR")
  gatewayTxId   String? // optional external transaction id
  notes         String?
  createdAt     DateTime    @default(now())
}
