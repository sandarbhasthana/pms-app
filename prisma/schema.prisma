generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tenant entity representing a property/organization
model Organization {
  id           String        @id @default(cuid())
  name         String
  domain       String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  channels     Channel[]
  reservations Reservation[]
  rooms        Room[]
  roomTypes    RoomType[]
  users        UserOrg[]

  @@index([domain])
}

/// Application user
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  image        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  favorites      Favorite[]
  reservations   Reservation[]
  memberships    UserOrg[]
  rateChangeLogs RateChangeLog[] // Audit trail for rate changes
}

/// Join table: user membership in a tenant with a role
model UserOrg {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model RoomType {
  id                   String       @id @default(cuid())
  organizationId       String
  name                 String
  abbreviation         String?
  privateOrDorm        String       @default("private")
  physicalOrVirtual    String       @default("physical")
  maxOccupancy         Int          @default(1)
  maxAdults            Int          @default(1)
  maxChildren          Int          @default(0)
  adultsIncluded       Int          @default(1)
  childrenIncluded     Int          @default(0)
  description          String?
  amenities            String[]
  customAmenities      String[]
  featuredImageUrl     String?
  additionalImageUrls  String[]
  // Base pricing fields (migrated from RoomPricing concept)
  basePrice            Float?                  // Base price for this room type
  weekdayPrice         Float?                  // Separate weekday pricing
  weekendPrice         Float?                  // Separate weekend pricing
  currency             String       @default("INR")
  availability         Int?                    // Available rooms count per room
  minLOS               Int?                    // Minimum length of stay
  maxLOS               Int?                    // Maximum length of stay
  closedToArrival      Boolean      @default(false)
  closedToDeparture    Boolean      @default(false)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  organization         Organization    @relation(fields: [organizationId], references: [id])
  rooms                Room[]
  dailyRates           DailyRate[]     // Date-specific rates
  seasonalRates        SeasonalRate[]  // Seasonal pricing
  rateChangeLogs       RateChangeLog[] // Audit trail

  @@unique([organizationId, name])
  @@index([organizationId])
}

model Room {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           String
  capacity       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  imageUrl       String?
  pricingId      String?
  sizeSqFt       Int?
  description    String?       // Individual room description
  doorlockId     String?       // Door lock integration ID
  roomTypeId     String?       // Link to RoomType
  favorites      Favorite[]
  reservations   Reservation[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  roomType       RoomType?     @relation(fields: [roomTypeId], references: [id])
  galleryImages  RoomImage[]
  pricing        RoomPricing?  @relation("RoomPricingLink")
  amenities      Amenity[]     @relation("RoomAmenities")

  @@index([organizationId])
}

model Amenity {
  id    String @id @default(cuid())
  name  String @unique
  rooms Room[] @relation("RoomAmenities")
}

/// Gallery images for a room
model RoomImage {
  id      String  @id @default(cuid())
  roomId  String
  url     String
  caption String?
  sort    Int?
  room    Room    @relation(fields: [roomId], references: [id])
}

/// Reservation or booking entity
model Reservation {
  id             String            @id @default(cuid())
  organizationId String
  roomId         String
  userId         String?
  guestName      String?
  checkIn        DateTime
  checkOut       DateTime
  source         ReservationSource
  channelId      String?
  status         ReservationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  adults         Int               @default(1)
  children       Int               @default(0)
  notes          String?
  email          String?
  idNumber       String?
  idType         String?
  issuingCountry String?
  phone          String?
  Payment        Payment[]
  channel        Channel?          @relation(fields: [channelId], references: [id])
  organization   Organization      @relation(fields: [organizationId], references: [id])
  room           Room              @relation(fields: [roomId], references: [id])
  user           User?             @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([roomId])
  @@index([userId])
  @@index([channelId])
}

/// Property settings scoped to a tenant
model PropertySettings {
  id                      String   @id @default(cuid())
  orgId                   String   @unique
  propertyType            String
  propertyName            String
  propertyPhone           String
  propertyEmail           String
  propertyWebsite         String?
  firstName               String
  lastName                String
  country                 String
  street                  String
  suite                   String?
  city                    String
  state                   String
  zip                     String
  latitude                Float
  longitude               Float
  isManuallyPositioned    Boolean @default(false)
  photos                  Json?
  printHeader             String?
  printHeaderImage        String?
  description             Json
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

/// OTA or channel integration for external bookings
model Channel {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           ChannelType
  credentials    Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  reservations   Reservation[]

  @@index([organizationId])
}

/// Favorite rooms per user
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
  @@index([roomId])
}

/// Payments for a reservation
model Payment {
  id            String      @id @default(cuid())
  reservationId String
  type          String
  method        String
  status        String
  amount        Float
  currency      String      @default("INR")
  gatewayTxId   String?
  notes         String?
  createdAt     DateTime    @default(now())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model RoomPricing {
  id                            String            @id @default(cuid())
  basePrice                     Float
  weekdayPrice                  Float?            // Separate weekday pricing
  weekendPrice                  Float?            // Separate weekend pricing
  currency                      String            @default("INR")
  mode                          String            @default("MANUAL")
  availability                  Int?              // Available rooms count
  minLOS                        Int?              // Minimum length of stay
  maxLOS                        Int?              // Maximum length of stay
  closedToArrival               Boolean           @default(false)
  closedToDeparture             Boolean           @default(false)
  createdAt                     DateTime          @default(now())
  updatedAt                     DateTime          @updatedAt
  roomId                        String            @unique
  room                          Room              @relation("RoomPricingLink", fields: [roomId], references: [id])
  dailyRates                    DailyRate[]       // Date-specific rates
  seasonalRates                 SeasonalRate[]    // Seasonal pricing
}

/// Daily rate overrides for specific dates
model DailyRate {
  id                        String          @id @default(cuid())
  roomTypeId                String          // Link to RoomType instead of individual room
  date                      DateTime        @db.Date
  basePrice                 Float
  availability              Int?            // Available rooms for this date
  minLOS                    Int?            // Minimum length of stay
  maxLOS                    Int?            // Maximum length of stay
  closedToArrival           Boolean         @default(false)
  closedToDeparture         Boolean         @default(false)
  restrictions              Json?           // Flexible restrictions (JSON)
  notes                     String?         // Optional notes
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  roomType                  RoomType        @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  pricingId                 String?         // Optional link to RoomPricing
  pricing                   RoomPricing?    @relation(fields: [pricingId], references: [id])

  @@unique([roomTypeId, date])
  @@index([date])
  @@index([roomTypeId])
}

/// Seasonal rate multipliers
model SeasonalRate {
  id          String      @id @default(cuid())
  name        String      // e.g., "Summer Season", "Holiday Premium"
  startDate   DateTime    @db.Date
  endDate     DateTime    @db.Date
  multiplier  Float       // 1.2 for 20% increase, 0.8 for 20% decrease
  isActive    Boolean     @default(true)
  roomTypeId  String?     // Optional: specific to room type
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  roomType    RoomType?   @relation(fields: [roomTypeId], references: [id])
  pricingId   String?     // Optional link to RoomPricing
  pricing     RoomPricing? @relation(fields: [pricingId], references: [id])

  @@index([startDate, endDate])
  @@index([roomTypeId])
}

/// Rate change audit log
model RateChangeLog {
  id          String      @id @default(cuid())
  roomTypeId  String
  date        DateTime?   @db.Date // null for base rate changes
  oldPrice    Float?
  newPrice    Float
  changeType  String      // "BASE_RATE", "DAILY_RATE", "SEASONAL_RATE"
  reason      String?     // Optional reason for change
  userId      String      // Who made the change
  createdAt   DateTime    @default(now())
  roomType    RoomType    @relation(fields: [roomTypeId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@index([roomTypeId])
  @@index([date])
  @@index([createdAt])
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  PROPERTY_MGR
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  ACCOUNTANT
  OWNER
  IT_SUPPORT
}

enum ReservationSource {
  WEBSITE
  PHONE
  WALK_IN
  CHANNEL
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  NO_SHOW
}

enum ChannelType {
  BOOKING_COM
  EXPEDIA
  AIRBNB
  VRBO
  OTHER
}
