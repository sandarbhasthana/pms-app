generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tenant entity representing an organization that can have multiple properties
model Organization {
  id           String            @id @default(cuid())
  name         String
  domain       String?           @unique
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Stripe Connect fields
  stripeAccountId           String?  // Stripe Connect account ID
  stripeOnboardingComplete  Boolean  @default(false) // Onboarding status
  stripeChargesEnabled      Boolean  @default(false) // Can process payments

  channels     Channel[]
  reservations Reservation[] // Keep for backward compatibility during migration
  rooms        Room[] // Keep for backward compatibility during migration
  roomTypes    RoomType[] // Keep for backward compatibility during migration
  users        UserOrg[]
  properties   Property[] // NEW: Organization can have multiple properties
  invitations  InvitationToken[] // NEW: User invitations for this organization

  @@index([domain])
  @@index([stripeAccountId])
}

/// Property entity representing individual properties within an organization
model Property {
  id             String   @id @default(cuid())
  organizationId String
  name           String // "Downtown NYC", "Beach Resort"
  address        String?
  phone          String?
  email          String?
  timezone       String   @default("UTC")
  currency       String   @default("USD")
  isActive       Boolean  @default(true)
  isDefault      Boolean  @default(false) // NEW: Mark default property per organization
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  organization   Organization      @relation(fields: [organizationId], references: [id])
  roomTypes      RoomType[]
  rooms          Room[]
  reservations   Reservation[]
  userProperties UserProperty[] // Property-level user access
  invitations    InvitationToken[] // NEW: Property-specific invitations
  settings       PropertySettings? // Property-specific settings

  @@unique([organizationId, name]) // Unique property names within org
  @@index([organizationId])
  @@index([organizationId, isDefault]) // NEW: Index for finding default properties
}

/// Application user
model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  phone           String? // NEW: Phone number for staff management
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  favorites       Favorite[]
  reservations    Reservation[]
  memberships     UserOrg[] // Organization-level access
  userProperties  UserProperty[] // NEW: Property-level access
  rateChangeLogs  RateChangeLog[] // Audit trail for rate changes
  sentInvitations InvitationToken[] @relation("InvitationCreator") // NEW: Invitations sent by this user
}

/// Join table: user membership in a tenant with a role
model UserOrg {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

/// Join table: user access to specific properties with property-level roles
model UserProperty {
  id         String       @id @default(cuid())
  userId     String
  propertyId String
  role       PropertyRole
  shift      ShiftType? // NEW: Basic shift assignment
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

/// Invitation tokens for user management
model InvitationToken {
  id             String        @id @default(cuid())
  email          String
  organizationId String
  role           UserRole // Organization-level role for the invitation
  propertyId     String? // Optional: specific property assignment
  propertyRole   PropertyRole? // Optional: property-level role
  shift          ShiftType? // Optional: shift assignment
  phone          String? // Phone number for the invited user
  token          String        @unique
  expiresAt      DateTime
  createdBy      String // Admin who sent invite
  createdAt      DateTime      @default(now())
  used           Boolean       @default(false)
  usedAt         DateTime?

  organization Organization @relation(fields: [organizationId], references: [id])
  property     Property?    @relation(fields: [propertyId], references: [id])
  creator      User         @relation("InvitationCreator", fields: [createdBy], references: [id])

  @@index([token])
  @@index([email])
  @@index([organizationId])
  @@index([propertyId])
}

/// Room type entity
model RoomType {
  id                  String          @id @default(cuid())
  organizationId      String // Keep for backward compatibility during migration
  propertyId          String // NEW: Property-level association
  name                String
  abbreviation        String?
  privateOrDorm       String          @default("private")
  physicalOrVirtual   String          @default("physical")
  maxOccupancy        Int             @default(1)
  maxAdults           Int             @default(1)
  maxChildren         Int             @default(0)
  adultsIncluded      Int             @default(1)
  childrenIncluded    Int             @default(0)
  description         String?
  amenities           String[]
  customAmenities     String[]
  featuredImageUrl    String?
  additionalImageUrls String[]
  // Base pricing fields (migrated from RoomPricing concept)
  basePrice           Float? // Base price for this room type
  weekdayPrice        Float? // Separate weekday pricing
  weekendPrice        Float? // Separate weekend pricing
  currency            String          @default("INR")
  availability        Int? // Available rooms count per room
  minLOS              Int? // Minimum length of stay
  maxLOS              Int? // Maximum length of stay
  closedToArrival     Boolean         @default(false)
  closedToDeparture   Boolean         @default(false)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  organization        Organization    @relation(fields: [organizationId], references: [id])
  property            Property?       @relation(fields: [propertyId], references: [id]) // NEW: Property relationship
  rooms               Room[]
  dailyRates          DailyRate[] // Date-specific rates
  seasonalRates       SeasonalRate[] // Seasonal pricing
  rateChangeLogs      RateChangeLog[] // Audit trail

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([propertyId])
}

/// Room entity
model Room {
  id             String        @id @default(cuid())
  organizationId String // Keep for backward compatibility during migration
  propertyId     String // NEW: Property-level association
  name           String
  type           String
  capacity       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  imageUrl       String?
  pricingId      String?
  sizeSqFt       Int?
  description    String? // Individual room description
  doorlockId     String? // Door lock integration ID
  roomTypeId     String? // Link to RoomType
  favorites      Favorite[]
  reservations   Reservation[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  property       Property?     @relation(fields: [propertyId], references: [id]) // NEW: Property relationship
  roomType       RoomType?     @relation(fields: [roomTypeId], references: [id])
  galleryImages  RoomImage[]
  pricing        RoomPricing?  @relation("RoomPricingLink")
  amenities      Amenity[]     @relation("RoomAmenities")

  @@index([organizationId])
  @@index([propertyId])
}

/// Amenities available in a room
model Amenity {
  id    String @id @default(cuid())
  name  String @unique
  rooms Room[] @relation("RoomAmenities")
}

/// Gallery images for a room
model RoomImage {
  id      String  @id @default(cuid())
  roomId  String
  url     String
  caption String?
  sort    Int?
  room    Room    @relation(fields: [roomId], references: [id])
}

/// Reservation or booking entity
model Reservation {
  id                    String            @id @default(cuid())
  organizationId        String // Keep for backward compatibility during migration
  propertyId            String // NEW: Property-level association
  roomId                String
  userId                String?
  guestName             String?
  checkIn               DateTime
  checkOut              DateTime
  source                ReservationSource
  channelId             String?
  status                ReservationStatus @default(PENDING)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  adults                Int               @default(1)
  children              Int               @default(0)
  notes                 String?
  email                 String?
  idNumber              String?
  idType                String?
  issuingCountry        String?
  phone                 String?
  payments              Payment[]
  stripeCustomerId      String? // Stripe Customer ID
  stripePaymentIntentId String?           @unique
  paymentStatus         String? // e.g. "requires_capture", "succeeded", "refunded"
  amountHeld            Int? // in cents (authorized amount)
  amountCaptured        Int? // in cents (captured amount)
  paidAmount            Float? // Total amount paid in dollars
  refundedAmount        Float? // Total amount refunded in dollars
  depositAmount         Int? // Required deposit in cents
  depositDueDate        DateTime? // When deposit is due
  finalPaymentDue       DateTime? // When final payment is due
  paymentTerms          String? // "full_upfront", "deposit_then_balance"

  channel             Channel?             @relation(fields: [channelId], references: [id])
  organization        Organization         @relation(fields: [organizationId], references: [id])
  property            Property?            @relation(fields: [propertyId], references: [id]) // NEW: Property relationship
  room                Room                 @relation(fields: [roomId], references: [id])
  user                User?                @relation(fields: [userId], references: [id])
  Refund              Refund[]
  paymentTransactions PaymentTransaction[]

  @@index([organizationId])
  @@index([propertyId])
  @@index([roomId])
  @@index([userId])
  @@index([channelId])
}

/// Property settings scoped to a tenant or specific property
model PropertySettings {
  id                   String   @id @default(cuid())
  orgId                String? // Organization-level settings (optional)
  propertyId           String? // Property-level settings (optional)
  propertyType         String
  propertyName         String
  propertyPhone        String
  propertyEmail        String
  propertyWebsite      String?
  firstName            String
  lastName             String
  country              String
  street               String
  suite                String?
  city                 String
  state                String
  zip                  String
  latitude             Float
  longitude            Float
  isManuallyPositioned Boolean  @default(false)
  photos               Json?
  printHeader          String?
  printHeaderImage     String?
  description          Json
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  property Property? @relation(fields: [propertyId], references: [id])

  @@unique([orgId])
  @@unique([propertyId])
  @@index([orgId])
  @@index([propertyId])
}

/// OTA or channel integration for external bookings
model Channel {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           ChannelType
  credentials    Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  reservations   Reservation[]

  @@index([organizationId])
}

/// Favorite rooms per user
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
  @@index([roomId])
}

/// Payments for a reservation
model Payment {
  id              String    @id @default(cuid())
  reservationId   String
  paymentMethodId String? // Link to stored payment method
  type            String // e.g. "capture", "refund"
  method          String // e.g. "card"
  status          String // e.g. "succeeded"
  amount          Float
  currency        String    @default("USD")
  gatewayTxId     String? // e.g. Stripe Charge ID
  description     String? // "Room deposit", "Minibar charges"
  processedAt     DateTime? // When payment was actually processed
  notes           String?
  createdAt       DateTime  @default(now())

  reservation   Reservation    @relation(fields: [reservationId], references: [id])
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@index([reservationId])
  @@index([status])
  @@index([type])
}

/// Stored payment methods for users/guests
model PaymentMethod {
  id                    String    @id @default(cuid())
  customerId            String // Links to User or Guest
  stripePaymentMethodId String    @unique
  type                  String // "card", "bank_account"
  cardBrand             String? // "visa", "mastercard"
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  isDefault             Boolean   @default(false)
  createdAt             DateTime  @default(now())
  payments              Payment[]

  @@index([customerId])
}

/// Record of refunds processed
model Refund {
  id             String      @id @default(cuid())
  stripeRefundId String      @unique // Stripe Refund ID
  reservationId  String
  amount         Float // in dollars (converted from cents)
  status         String // e.g. "succeeded", "failed"
  reason         String? // refund reason
  createdAt      DateTime    @default(now())
  reservation    Reservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
}

/// Webhook event tracking for idempotency and debugging
model WebhookEvent {
  id            String   @id @default(cuid())
  stripeEventId String   @unique // Stripe event ID
  eventType     String   // Event type (e.g., "payment_intent.succeeded")
  processedAt   DateTime @default(now())
  data          Json     // Raw event data
  error         String?  // Error message if processing failed
  createdAt     DateTime @default(now())

  @@index([eventType])
  @@index([processedAt])
}

/// Payment transaction log for detailed tracking
model PaymentTransaction {
  id                       String   @id @default(cuid())
  reservationId            String
  stripePaymentIntentId    String?
  stripeRefundId           String?
  type                     String   // 'payment', 'refund', 'capture', 'dispute'
  amount                   Float    // in dollars
  currency                 String   @default("USD")
  status                   String   // 'completed', 'failed', 'pending', 'canceled'
  paymentMethod            String?  // 'card', 'bank_account', etc.
  failureReason            String?  // Error message for failed transactions
  reason                   String?  // Reason for refunds
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  reservation              Reservation @relation(fields: [reservationId], references: [id])

  @@unique([reservationId, stripePaymentIntentId])
  @@index([reservationId])
  @@index([stripePaymentIntentId])
  @@index([type])
  @@index([status])
}

/// Pricing information for a room
model RoomPricing {
  id                String         @id @default(cuid())
  basePrice         Float
  weekdayPrice      Float? // Separate weekday pricing
  weekendPrice      Float? // Separate weekend pricing
  currency          String         @default("INR")
  mode              String         @default("MANUAL")
  availability      Int? // Available rooms count
  minLOS            Int? // Minimum length of stay
  maxLOS            Int? // Maximum length of stay
  closedToArrival   Boolean        @default(false)
  closedToDeparture Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  roomId            String         @unique
  room              Room           @relation("RoomPricingLink", fields: [roomId], references: [id])
  dailyRates        DailyRate[] // Date-specific rates
  seasonalRates     SeasonalRate[] // Seasonal pricing
}

/// Daily rate overrides for specific dates
model DailyRate {
  id                String       @id @default(cuid())
  roomTypeId        String // Link to RoomType instead of individual room
  date              DateTime     @db.Date
  basePrice         Float
  availability      Int? // Available rooms for this date
  minLOS            Int? // Minimum length of stay
  maxLOS            Int? // Maximum length of stay
  closedToArrival   Boolean      @default(false)
  closedToDeparture Boolean      @default(false)
  restrictions      Json? // Flexible restrictions (JSON)
  notes             String? // Optional notes
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  roomType          RoomType     @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  pricingId         String? // Optional link to RoomPricing
  pricing           RoomPricing? @relation(fields: [pricingId], references: [id])

  @@unique([roomTypeId, date])
  @@index([date])
  @@index([roomTypeId])
}

/// Seasonal rate multipliers
model SeasonalRate {
  id         String       @id @default(cuid())
  name       String // e.g., "Summer Season", "Holiday Premium"
  startDate  DateTime     @db.Date
  endDate    DateTime     @db.Date
  multiplier Float // 1.2 for 20% increase, 0.8 for 20% decrease
  isActive   Boolean      @default(true)
  roomTypeId String? // Optional: specific to room type
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  roomType   RoomType?    @relation(fields: [roomTypeId], references: [id])
  pricingId  String? // Optional link to RoomPricing
  pricing    RoomPricing? @relation(fields: [pricingId], references: [id])

  @@index([startDate, endDate])
  @@index([roomTypeId])
}

/// Rate change audit log
model RateChangeLog {
  id         String    @id @default(cuid())
  roomTypeId String
  date       DateTime? @db.Date // null for base rate changes
  oldPrice   Float?
  newPrice   Float
  changeType String // "BASE_RATE", "DAILY_RATE", "SEASONAL_RATE"
  reason     String? // Optional reason for change
  userId     String // Who made the change
  createdAt  DateTime  @default(now())
  roomType   RoomType  @relation(fields: [roomTypeId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([roomTypeId])
  @@index([date])
  @@index([createdAt])
}

enum PropertyRole {
  PROPERTY_MGR
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  SECURITY
  GUEST_SERVICES
  ACCOUNTANT
  IT_SUPPORT
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  PROPERTY_MGR
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  ACCOUNTANT
  OWNER
  IT_SUPPORT
  SECURITY
}

enum ReservationSource {
  WEBSITE
  PHONE
  WALK_IN
  CHANNEL
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  NO_SHOW
}

enum ChannelType {
  BOOKING_COM
  EXPEDIA
  AIRBNB
  VRBO
  OTHER
}

enum ShiftType {
  MORNING // 6 AM - 2 PM
  EVENING // 2 PM - 10 PM
  NIGHT // 10 PM - 6 AM
  FLEXIBLE // No fixed shift
}
